import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from database import init_db, save_search
from aiogram.fsm.storage.memory import MemoryStorage


load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

class LaptopSearch(StatesGroup):
    waiting_for_specs = State()

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –Ω–æ—É—Ç–±—É–∫", callback_data="find_laptop")],
            [InlineKeyboardButton(text="‚öñÔ∏è –°—Ä–∞–≤–Ω–∏—Ç—å –Ω–æ—É—Ç–±—É–∫–∏", callback_data="compare_laptops")]
        ])
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –Ω–æ—É—Ç–±—É–∫–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("help"))
async def send_help(message: types.Message):
    try:
        help_text = (
            "üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
            "üìå –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–æ—É—Ç–±—É–∫–æ–≤."
        )
        await message.answer(help_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ send_help: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "find_laptop")
async def find_laptop(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–æ—É—Ç–±—É–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–∏–≥—Ä—ã, –¥–æ 100 000 —Ä—É–±, RTX 4060'):")
        await state.set_state(LaptopSearch.waiting_for_specs)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ find_laptop: {e}")
        await call.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@dp.message(LaptopSearch.waiting_for_specs)
async def process_laptop_specs(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        user_specs = message.text
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_specs}")
        save_search(user_id, user_specs)
        await message.answer(f"üîç –ò—â—É –Ω–æ—É—Ç–±—É–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {user_specs}\n(–ü—Ä–∏–º–µ—Ä: MSI Katana 17, ASUS TUF 15)")
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_laptop_specs: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "compare_laptops")
async def compare_laptops(call: types.CallbackQuery):
    try:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª–∏ –Ω–æ—É—Ç–±—É–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'MSI Katana 17, ASUS TUF 15'):")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ compare_laptops: {e}")
        await call.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    try:
        await asyncio.to_thread(init_db)
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

        await bot.delete_webhook(drop_pending_updates=True)
        await asyncio.sleep(1)

        await dp.start_polling(bot)
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logging.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")  